Roteiro - Aula 11/04/2025

------------------------------------------------------------

- Criar um projeto Dynamic Web Project com o nome de IFitness.

- Converter o projeto Dynamic Web Project em um Maven Project:

	- Botão direito do mouse no nome do projeto -> Configure -> Convert to Maven Project

- Alterar o arquivo pom.xml:

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>br.edu.ifspcjo.ads.web2</groupId>
  <artifactId>ifitness</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>war</packaging>
  <name>IFitness</name>
  <description>Projeto da disciplina CJOWEB2</description>
  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
  </properties>
  <dependencies>
  	<dependency>
        <groupId>jakarta.servlet</groupId>
        <artifactId>jakarta.servlet-api</artifactId>
        <version>6.0.0</version>
        <scope>provided</scope>
	</dependency>
	<dependency>
	    <groupId>jakarta.servlet.jsp.jstl</groupId>
	    <artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
	    <version>3.0.0</version>
	</dependency>
	<dependency>
	    <groupId>org.glassfish.web</groupId>
	    <artifactId>jakarta.servlet.jsp.jstl</artifactId>
	    <version>3.0.1</version>
	</dependency>
  </dependencies>
  <build>
    <plugins>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.8.1</version>
        <configuration>
          	<source>17</source>
			<target>17</target>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-war-plugin</artifactId>
        <version>3.2.3</version>
      </plugin>
    </plugins>
  </build>
</project>

------------------------------------------------------------
Cadastro de Usuários usando Banco de Dados em MySQL
------------------------------------------------------------

- Criar o banco de dados para a aplicação:

CREATE DATABASE ifitness;

- Criar a tabela user no banco de dados ifitness:

CREATE TABLE user (
	id BIGINT(20) PRIMARY KEY AUTO_INCREMENT,
	name VARCHAR(50) NOT NULL,
	email VARCHAR(50) NOT NULL,
	password VARCHAR(150) NOT NULL,
	birth_date DATE NOT NULL,
	gender VARCHAR(30) NOT NULL
  	active BOOLEAN NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

- Adicionar a dependência do MySQL Connector-J no arquivo pom.xml:

	<dependency>
		<groupId>com.mysql</groupId>
		<artifactId>mysql-connector-j</artifactId>
		<version>8.0.31</version>
	</dependency>

- Criar o arquivo context.xml dentro da pasta META-INF e configurar o Tomcat para cria um pool de conexões JDBC com o banco de dados "ifitness":

<?xml version="1.0" encoding="UTF-8"?>
<Context crossContext="true">
	<Resource name="jdbc/IFitnessDB" auth="Container" 
    	type="javax.sql.DataSource"
    	maxTotal = "100" minIdle="10" maxIdle="30" maxWaitMillis="10000"
    	username="root" password=""
    	driverClassName="com.mysql.cj.jdbc.Driver"
    	url="jdbc:mysql://localhost:3306/ifitness" />
</Context>

- Criar a classe User no pacote model:

package br.edu.ifspcjo.ads.web2.ifitness.model;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.Objects;

public class User implements Serializable {

	private static final long serialVersionUID = 1L;

	private Long id;
	private String name;
	private String email;
	private String password;
	private LocalDate dateOfBirth;
	private Gender gender;
	private Integer score;
	
	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public String getEmail() {
		return email;
	}

	public void setEmail(String email) {
		this.email = email;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public LocalDate getDateOfBirth() {
		return dateOfBirth;
	}

	public void setDateOfBirth(LocalDate dateOfBirth) {
		this.dateOfBirth = dateOfBirth;
	}

	public Gender getGender() {
		return gender;
	}

	public void setGender(Gender gender) {
		this.gender = gender;
	}

	public Integer getScore() {
		return score;
	}
	
	public void setScore(Integer score) {
		this.score = score;
	}
	
	@Override
	public int hashCode() {
		return Objects.hash(id);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		User other = (User) obj;
		return Objects.equals(id, other.id);
	}

}

- Criar o enum Gender pacote model:

package br.edu.ifspcjo.ads.web2.ifitness.model;

public enum Gender {
	
	MASCULINO("Masculino"),
	FEMININO("Feminino"),
	OUTRO("Outro"),
	PREFIRO_NAO_DIZER("Prefiro não dizer");
	
	private String description;
	
	private Gender(String description) {
		this.description = description;
	}
	
	public String getDescription() {
		return description;
	}
}

- Criar a classe DataSourceSearcher no pacote utils:

package br.edu.ifspcjo.ads.web2.ifitness.utils;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

public class DataSourceSearcher {
	
	private static DataSourceSearcher instance = 
			new DataSourceSearcher();
	private DataSource dataSource;
	
	private DataSourceSearcher() {
		try {
			Context context = new InitialContext();
			context = (Context)context.lookup("java:comp/env");
			dataSource = (DataSource)context.lookup("jdbc/IFitnessDB");
		}catch (NamingException e) {
			throw new RuntimeException("Erro durante o lookup", e);
		}
	}
	
	public DataSource getDataSource() {
		return dataSource;
	}

	public static DataSourceSearcher getInstance() {
		return instance;
	}
}

- Criar a classe PasswordEncoder no pacote utils:

package br.edu.ifspcjo.ads.web2.ifitness.utils;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

public class PasswordEncoder {

	public static String encode(String password) {
		String passwordEncrypted = null;
		try {
			MessageDigest md5 = MessageDigest.getInstance("MD5");
			byte[] bytes = md5.digest(password.getBytes());
			StringBuilder builder = new StringBuilder();
			for(byte b: bytes) {
				builder.append(String.format("%02X", b));
			}
			passwordEncrypted = builder.toString();
		}catch (NoSuchAlgorithmException e) {
			throw new RuntimeException("Erro ao buscar algoritmo", e);
		}
		return passwordEncrypted;
	}
}

- Criar a classe UserDao no pacote dao:

package br.edu.ifspcjo.ads.web2.ifitness.dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Optional;

import javax.sql.DataSource;

import br.edu.ifspcjo.ads.web2.ifitness.model.User;
import br.edu.ifspcjo.ads.web2.ifitness.utils.PasswordEncoder;

public class UserDao {

	private DataSource dataSource;

	public UserDao(DataSource dataSource) {
		super();
		this.dataSource = dataSource;
	}
		
	public Boolean save(User user){
		Optional<User> optional = getUserByEmail(user.getEmail());
		if(optional.isPresent()) {
			return false;
		}
		String sql = "insert into user (name, email, password, "
				+ "birth_date, gender, active) values (?,?,?,?,?,?)";
		try(Connection conn = dataSource.getConnection(); 
				PreparedStatement ps = conn.prepareStatement(sql)){
			ps.setString(1, user.getName());
			ps.setString(2, user.getEmail());
			ps.setString(3, user.getPassword());
			ps.setDate(4, Date.valueOf(user.getDateOfBirth()));
			ps.setString(5, user.getGender().toString());
			ps.setBoolean(6, true);
			ps.executeUpdate();
		}catch (SQLException e) {
			throw new RuntimeException("Erro durante a escrita no BD", e);
		}
		return true;
	}
}

*******************************************************
- Criar a classe UserRegisterServlet no pacote servlets:


package br.edu.ifspcjo.ads.web2.task.servlets;

import java.io.IOException;
import java.time.LocalDate;

import br.edu.ifspcjo.ads.web2.task.model.User;
import br.edu.ifspcjo.ads.web2.arqweb2.task.dao.UserDao;
import br.edu.ifspcjo.ads.web2.task.utils.DataSourceSearcher;
import br.edu.ifspcjo.ads.web2.task.utils.PasswordEncoder;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@WebServlet("/userRegisterServlet")
public class UserRegisterServlet extends HttpServlet{

	private static final long serialVersionUID = 1L;
	
	public UserRegisterServlet() {
		super();
	}
	
	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		String name = req.getParameter("name");
		String email = req.getParameter("email");
		String password = req.getParameter("password");
		String dateOfBirth = req.getParameter("dateOfBirth");
		String gender = req.getParameter("gender");
		
		User user = new User();
		user.setName(name);
		user.setEmail(email);
		user.setPassword(PasswordEncoder.encode(password));
		user.setDateOfBirth(LocalDate.parse(dateOfBirth));
		user.setGender(Gender.valueOf(gender));
		
		UserDao userDao = new UserDao(DataSourceSearcher.getInstance().getDataSource());
		
		RequestDispatcher dispatcher = null;
		
		if(userDao.save(user)) {
			req.setAttribute("result", "registered");
			dispatcher = req.getRequestDispatcher("/login.jsp");
		}else {
			req.setAttribute("result", "notRegistered");
			dispatcher = req.getRequestDispatcher("user-register.jsp");
		}
		
		dispatcher.forward(req, resp);
	}

}
****************************
- Criar o arquivo login.jsp:

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="jakarta.tags.core"%>
<%@ taglib prefix="fn" uri="jakarta.tags.functions"%>
<!doctype html>
<html lang="pt-BR" data-bs-theme="light">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link href="css/styles.css" rel="stylesheet">
    <title>IFitness - Página de Login</title>
  </head>
  <body>
  	<div class="container">
		<div class="col-lg-4 offset-lg-4 col-sm-12">
			<c:choose>
				<c:when test="${result == 'registered'}">
					<div class="alert alert-success alert-dismissible fade show"
						role="alert">
						Usuário cadastrado com sucesso. Faça o login.
						<button type="button" class="btn-close" data-bs-dismiss="alert"
							aria-label="Close"></button>
					</div>
				</c:when>
				<c:when test="${result == 'loginError'}">
					<div class="alert alert-danger alert-dismissible fade show"
						role="alert">
						E-mail e/ou senha inválidos.
						<button type="button" class="btn-close" data-bs-dismiss="alert"
							aria-label="Close"></button>
					</div>
				</c:when>
			</c:choose>
			
	  		<form action="loginServlet" method="post">
	  				<h1 class="text-center">Login</h1>
	  				
	  				<div class="input-group mb-3">
	  					<span class="input-group-text">
	  						<jsp:include page="img/envelope_icon.jsp" />
	  					</span>
	  					<input type="email" name="email" id="email"
	  						placeholder="E-mail" required="required"
	  						class="form-control">
	  				</div>
	  				
	  				<div class="input-group mb-3">
	  					<span class="input-group-text">
	  						<jsp:include page="img/file-lock_icon.jsp" />
	  					</span>
	  					<input type="password" name="password" id="password"
	  						placeholder="Senha" required="required"
	  						class="form-control">
	  				</div>
	  				
	  				<div class="mb-3">
	  					<button type="submit" class="btn btn-primary">Login</button>
	  				</div>
	  				
	  				<div class="mb-3">
	  					<a href="user-register.jsp" id="link"
	  						class="btn btn-secondary">Cadastrar</a>
	  				</div>
	  			
	  		</form>
  		</div>
  	</div>

    <!-- Option 1: Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
	<script type="text/javascript" src="js/theme.js"></script>
  </body>
</html>
*******************************************************

- Alterar a tag <welcome-file-list> do arquivo web.xml:

<welcome-file-list>
    <welcome-file>login.jsp</welcome-file>
</welcome-file-list>
***********************************

- Criar o arquivo user-register.jsp:

<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="jakarta.tags.core"%>
<%@ taglib prefix="fn" uri="jakarta.tags.functions"%>
<!doctype html>
<html lang="pt-BR">
<head>
<!-- Required meta tags -->
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1">

<!-- Bootstrap CSS -->
<link
	href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"
	rel="stylesheet"
	integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC"
	crossorigin="anonymous">
<link href="css/styles.css" rel="stylesheet">
<title>Página de Cadastro</title>
</head>
<body>
	<div class="container">
		<div class="col-lg-6 offset-lg-3 col-sm-12">
			<c:if test="${result == 'notRegistered'}">
				<div class="alert alert-danger alert-dismissible fade show"
					role="alert">
					E-mail já cadastrado. Tente novamente.
					<button type="button" class="btn-close" data-bs-dismiss="alert"
						aria-label="Close"></button>
				</div>
			</c:if>
			
			<form action="userRegisterServlet" method="post" id="form1">
				<h1 class="text-center">Cadastre-se</h1>

				<div class="mb-2">
					<label for="name">Nome completo*</label> <input type="text"
						name="name" id="name" class="form-control" minlength="3"
						maxlength="50" required="required"> <span id="0"></span>
				</div>

				<div class="mb-2">
					<label for="email">E-mail*</label> <input type="email" name="email"
						id="email" class="form-control" required="required"> <span
						id="1"></span>
				</div>

				<div class="mb-2">
					<label for="password">Senha*</label> <input type="password"
						name="password" id="password" class="form-control" minlength="6"
						maxlength="12" required="required"> <span id="2"></span>
				</div>

				<div class="mb-2">
					<label for="confirmPassword">Confirmação de Senha*</label> <input
						type="password" name="confirmPassword" id="confirmPassword"
						class="form-control" minlength="6" maxlength="12"
						required="required"> <span id="3"></span>
				</div>

				<div class="mb-2">
					<label for="dateOfBirth">Data de Nascimento*</label> <input
						type="date" name="dateOfBirth" id="dateOfBirth"
						class="form-control" max="2012-12-31" required="required">
					<span id="4"></span>
				</div>

				<div class="mb-2">
					<label for="gender">Gênero*</label> <select class="form-select"
						name="gender" id="gender" required="required">
						<option value="" selected>Selecione</option>
						<option value="MASCULINO">Masculino</option>
						<option value="FEMININO">Feminino</option>
						<option value="OUTRO">Outro</option>
						<option value="PREFIRO_NAO_DIZER">Prefiro não dizer</option>
					</select> <span id="5"></span>
				</div>

				<div class="mb-2">
					<button type="submit" class="btn btn-primary">Salvar</button>
				</div>
			</form>
		</div>
	</div>

	<script
		src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
		integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
		crossorigin="anonymous"></script>
	<script src="js/user-register.js"></script>
</body>
</html>

- Criar o arquivo styles.css:

@charset "UTF-8";

svg {
	width: 30px;
	height: 30px;
}

button, #link {
	width: 100%;
}

span {
	color: red;
}
***********************************

- Criar o arquivo user-register.js:

"use strict"

window.onload = initPage;

function initPage(){
	let form;
	form = document.getElementById('form1');
	// desativar a validação automática do HTML5
	form.noValidate = true;
	form.addEventListener('submit', function(e){
		let valid = processValidity(this);
		if(!valid){
			e.preventDefault();
		}
	});
}

function processValidity(form){
	let valid;
	validatePassword(form);
	valid = applyValidity(form);
	return valid;
}

function applyValidity(form){
	let valid = true;
	let count = 0;
	let elements = form.elements;
	for(let i = 0; i < elements.length - 1; i++){
		let element = elements[i];
		let span = document.getElementById(i);
		if(!element.validity.valid){
			span.innerHTML = element.validationMessage;
			count++;
		}else{
			span.innerHTML = "";
		}
	}
	if(count > 0){
		valid = false;
	}
	return valid;
}

function validatePassword(form){
	let password, confirmPassword;
	password = document.getElementById('password');
	confirmPassword = document.getElementById('confirmPassword');
	if(password.value != confirmPassword.value){
		password.setCustomValidity(
		'Os valores dos campos de senha e confirmação '+ 
		'de senha são diferentes.');
	}else{
		password.setCustomValidity('');
	}
}