Roteiro - Aula 5/04/2025

------------------------------------------------------------
Verificação de e-mail já existente
------------------------------------------------------------

- Adicionar o método getUserByEmail() na classe UserDao:

	public Optional<User> getUserByEmail(String email) {
		String sql = "select id,email from user where email=?";
		Optional<User> optional = Optional.empty();
		try (Connection con = dataSource.getConnection(); PreparedStatement ps = con.prepareStatement(sql)) {
			ps.setString(1, email);
			try (ResultSet rs = ps.executeQuery()) {
				if (rs.next()) {
					User user = new User();
					user.setId(rs.getLong(1));
					user.setEmail(rs.getString(2));
					optional = Optional.of(user);
				}
			}
			return optional;
		} catch (SQLException sqlException) {
			throw new RuntimeException("Erro durante a consulta", sqlException);
		}
	}
********************************************

- Alterar o método save() da classe UserDao:

	public Boolean save(User user){
		// verificar se existe um usuário com o mesmo e-mail
		Optional<User> optional = getUserByEmail(user.getEmail());
		if(optional.isPresent()) {
			return false;
		}
		String sql = "insert into user (name, email, password, "
				+ "birth_date, gender, active) values (?,?,?,?,?,?)";
		try(Connection conn = dataSource.getConnection(); 
				PreparedStatement ps = conn.prepareStatement(sql)){
			ps.setString(1, user.getName());
			ps.setString(2, user.getEmail());
			ps.setString(3, user.getPassword());
			ps.setDate(4, Date.valueOf(user.getDateOfBirth()));
			ps.setString(5, user.getGender().toString());
			ps.setBoolean(6, true);
			ps.executeUpdate();
		}catch (SQLException e) {
			throw new RuntimeException("Erro durante a escrita no BD", e);
		}
		return true;
	}
***********************************************************

------------------------------------------------------------
Login do Usuário usando Cookie
------------------------------------------------------------

- Adicionar o método getUserByEmailAndPassword() na classe UserDao:

	public Optional<User> getUserByEmailAndPassword(String email, String password) {
		String passwordEncripted = PasswordEncoder.encode(password);
		
		String sql = "select id,name,email from user where email=? and password=?";
		Optional<User> optional = Optional.empty();
		try (Connection con = dataSource.getConnection(); PreparedStatement ps = con.prepareStatement(sql)) {
			ps.setString(1, email);
			ps.setString(2, passwordEncripted);
			try (ResultSet rs = ps.executeQuery()) {
				if (rs.next()) {
					User user = new User();
					user.setId(rs.getLong(1));
					user.setName(rs.getString(2));
					user.setEmail(rs.getString(3));
					optional = Optional.of(user);
				}
			}
			return optional;
		} catch (SQLException sqlException) {
			throw new RuntimeException("Erro durante a consulta no BD", sqlException);
		}
	}
******************************

- Criar a classe LoginServlet:

package br.edu.ifspcjo.ads.web2.task.servlets;

import java.io.IOException;
import java.util.Optional;

import br.edu.ifspcjo.ads.web2.task.dao.UserDao;
import br.edu.ifspcjo.ads.web2.task.model.User;
import br.edu.ifspcjo.ads.web2.task.utils.DataSourceSearcher;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@WebServlet("/loginServlet")
public class LoginServlet extends HttpServlet{

	private static final long serialVersionUID = 1L;
	
	public LoginServlet() {
		super();
	}
	
	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		String email = req.getParameter("email");
		String password = req.getParameter("password");
		UserDao userDao = new UserDao(DataSourceSearcher.getInstance().getDataSource());
		Optional<User> optional = userDao.getUserByEmailAndPassword(email, password);
		RequestDispatcher dispatcher = null;
		if(optional.isPresent()) {
			// armazenar o cookie
			Cookie cookie = new Cookie("loggedUser", email);
			cookie.setMaxAge(60*60*24); //em segundos
			resp.addCookie(cookie);
			
			req.setAttribute("name", optional.get().getName());
			dispatcher = req.getRequestDispatcher("/home.jsp");
		}else {
			// remover o cookie
			Cookie[] cookies = req.getCookies();
			if(cookies != null) {
				for(Cookie c: cookies) {
					if(c.getName().equals("loggedUser")) {
					  c.setMaxAge(0);
					  resp.addCookie(c);
					}
				}
			}
			req.setAttribute("result", "loginError");
			dispatcher = req.getRequestDispatcher("/login.jsp");
		}
		dispatcher.forward(req, resp);
	}

}
****************************

- Criar o arquivo home.jsp:

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="jakarta.tags.core"%>
<%@ taglib prefix="fn" uri="jakarta.tags.functions"%>
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<title>Página Principal</title>
</head>
<body>
	<h1>Seja bem-vindo(a), ${name}!</h1>
</body>
</html>
************************************************************

------------------------------------------------------------
Cadastro de Atividades
------------------------------------------------------------

- Criar a tabela activiy no banco de dados ifitness:

CREATE TABLE activity (
	id BIGINT(20) PRIMARY KEY AUTO_INCREMENT,
	type VARCHAR(20) NOT NULL,
	activity_date DATE NOT NULL,
	distance DOUBLE NOT NULL,
	duration INT NOT NULL,
	user_id BIGINT(20) NOT NULL,
	FOREIGN KEY (user_id) REFERENCES user(id)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
**************************

- Criar a classe Activity:

package br.edu.ifspcjo.ads.web2.task.model;

import java.io.Serializable;
import java.time.LocalDate;
import java.util.Objects;

public class Activity implements Serializable {

	private static final long serialVersionUID = 1L;

	private Long id;
	private ActivityType type;
	private LocalDate date;
	private Double distance;
	private Integer duration;
	private User user;

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public ActivityType getType() {
		return type;
	}

	public void setType(ActivityType type) {
		this.type = type;
	}

	public LocalDate getDate() {
		return date;
	}

	public void setDate(LocalDate date) {
		this.date = date;
	}

	public Double getDistance() {
		return distance;
	}

	public void setDistance(Double distance) {
		this.distance = distance;
	}

	public Integer getDuration() {
		return duration;
	}

	public void setDuration(Integer duration) {
		this.duration = duration;
	}
	
	public User getUser() {
		return user;
	}
	
	public void setUser(User user) {
		this.user = user;
	}

	@Override
	public int hashCode() {
		return Objects.hash(id);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Activity other = (Activity) obj;
		return Objects.equals(id, other.id);
	}

}

*****************************

- Criar a classe ActivityDao:

package br.edu.ifspcjo.ads.web2.task.dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import javax.sql.DataSource;

import br.edu.ifspcjo.ads.web2.task.model.Activity;

public class ActivityDao {

	private DataSource dataSource;

	public ActivityDao(DataSource dataSource) {
		this.dataSource = dataSource;
	}
	
	public Boolean save(Activity activity) {
		String sql = "insert into activity (type, activity_date, distance, duration, user_id) values(?,?,?,?,?)";
		try (Connection con = dataSource.getConnection(); PreparedStatement ps = con.prepareStatement(sql)) {
			ps.setString(1, activity.getType().toString());
			ps.setDate(2, Date.valueOf(activity.getDate()));
			ps.setDouble(3, activity.getDistance());
			ps.setInt(4, activity.getDuration());
			ps.setLong(5, activity.getUser().getId());
			ps.executeUpdate();
			return true;
		} catch (SQLException sqlException) {
			throw new RuntimeException("Erro ao inserir dados", sqlException);
		}
	}
}
****************************************

- Criar a classe ActivityRegisterServlet:

package br.edu.ifspcjo.ads.web2.task.servlets;

import java.io.IOException;
import java.time.LocalDate;
import java.util.Optional;

import br.edu.ifspcjo.ads.web2.task.dao.ActivityDao;
import br.edu.ifspcjo.ads.web2.task.dao.UserDao;
import br.edu.ifspcjo.ads.web2.task.model.Activity;
import br.edu.ifspcjo.ads.web2.task.model.ActivityType;
import br.edu.ifspcjo.ads.web2.task.model.User;
import br.edu.ifspcjo.ads.web2.task.utils.DataSourceSearcher;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@WebServlet("/activityRegister")
public class ActivityRegisterServlet extends HttpServlet {

	private static final long serialVersionUID = 1L;

	public ActivityRegisterServlet() {
		super();
	}

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		ActivityType type = ActivityType.valueOf(req.getParameter("type"));
		LocalDate date = LocalDate.parse(req.getParameter("date"));
		Double distance = Double.parseDouble(req.getParameter("distance"));
		Integer duration = Integer.parseInt(req.getParameter("duration"));

		// buscar User logado
		Optional<User> optional = Optional.empty();
		Cookie[] cookies = req.getCookies();
		if (cookies != null) {
			for (Cookie c : cookies) {
				if (c.getName().equals("loggedUser")) {
					UserDao userDao = new UserDao(DataSourceSearcher.getInstance().getDataSource());
					optional = userDao.getUserByEmail(c.getValue());
				}			}
		}

		RequestDispatcher dispatcher = null;
		
		if(optional.isPresent()) {
			Activity activity = new Activity();
			activity.setType(type);
			activity.setDate(date);
			activity.setDistance(distance);
			activity.setDuration(duration);
			activity.setUser(optional.get());
			ActivityDao activityDao = new ActivityDao(DataSourceSearcher.getInstance().getDataSource());
			if(activityDao.save(activity)) {
				req.setAttribute("result", "registered");
				dispatcher = req.getRequestDispatcher("/activity-register.jsp");
			}
		} else {
			req.setAttribute("result", "notRegistered");
			dispatcher = req.getRequestDispatcher("/activity-register.jsp");
		}

		dispatcher.forward(req, resp);
	}

}
***************************************

- Criar a página activity-register.jsp:

<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="jakarta.tags.core"%>
<%@ taglib prefix="fn" uri="jakarta.tags.functions"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>Cadastro de Atividade</title>
<link
	href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css"
	rel="stylesheet">
<link rel="stylesheet" href="css/styles.css">
</head>
<body>
	<div class="container ">
		<div class="center col-lg-6 col-sm-12">
				<c:if test="${result == 'registered'}">
					<div class="alert alert-success alert-dismissible fade show"
						role="alert">
						Atividade cadastrada com sucesso.
						<button type="button" class="btn-close" data-bs-dismiss="alert"
							aria-label="Close"></button>
					</div>
				</c:if>
				<c:if test="${result == 'notRegistered'}">
					<div class="alert alert-danger alert-dismissible fade show"
						role="alert">
						Atividade não cadastrada. Faça o login.
						<button type="button" class="btn-close" data-bs-dismiss="alert"
							aria-label="Close"></button>
					</div>
				</c:if>
			<form action="activityRegister" method="post" id="form1">

					<h1 class="text-center">Nova Atividade</h1>
					
					<div class="mb-2">
						<label for="type">Tipo*</label> 
						<select class="form-select"
							name="type" id="type" required="required">
							<option value="" selected>Selecione</option>
							<option value="CAMINHADA">Caminhada</option>
							<option value="CICLISMO">Ciclismo</option>
							<option value="CORRIDA">Corrida</option>
							<option value="NATACAO">Natação</option>
						</select>
					</div>
					
					<div class="mb-2">
						<label for="date">Data*</label> 
						<input type="date" name="date" id="date"
							class="form-control" required="required">
					</div>

					<div class="mb-2">
						<label for="distance">Distância (Km)*</label> 
						<input type="number"
							name="distance" id="distance" class="form-control" step="0.1" 
							required="required">
					</div>

					<div class="mb-2">
						<label for="duration">Duração (minutos)*</label> 
						<input type="number" step="1"
							name="duration" id="duration" class="form-control" required="required">
					</div>

					<div class="col-12 mb-2">
						<button type="submit" class="btn btn-primary">Salvar</button>
					</div>
			</form>
		</div>
	</div>
	<script
		src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
****************************
- Alterar o arquivo home.jsp:

<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="jakarta.tags.core"%>
<%@ taglib prefix="fn" uri="jakarta.tags.functions"%>
<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1">

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css">
    <link href="css/styles.css" rel="stylesheet">
    
    <title>Página Principal</title>
</head>
<body>
	<h1>Seja bem-vindo(a), ${name}!</h1>
	<div class="mb-3">
		<a href="activity-register.jsp" id="link" class="btn btn-secondary">Cadastrar uma atividade</a>
	</div>
	
	<!-- Option 1: Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>




