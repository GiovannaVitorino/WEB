Roteiro - Aula 16/05/2025

------------------------------------------------------------
Atualização e Remoção de Atividades
------------------------------------------------------------

- Adicionar os seguintes métodos na classe ActivityDao:

		public Activity getActivitiesById(Long id) {
		String sql = "select * from activity where id=?";
		Activity activity = null;
		try (Connection con = dataSource.getConnection(); PreparedStatement ps = con.prepareStatement(sql)) {
			ps.setLong(1, id);
			try (ResultSet rs = ps.executeQuery()) {
				if (rs.next()) {
					activity = new Activity();
					activity.setId(rs.getLong(1));
					activity.setType(ActivityType.valueOf(rs.getString(2)));
					activity.setDate(LocalDate.parse(rs.getDate(3).toString()));
					activity.setDistance(rs.getDouble(4));
					activity.setDuration(rs.getInt(5));
					User user = new User();
					user.setId(rs.getLong(6));
					activity.setUser(user);
				}
			}
			return activity;
		} catch (SQLException sqlException) {
			throw new RuntimeException("Erro durante a consulta", sqlException);
		}
	}
	
	public Boolean update(Activity activity) {
		String sql = "update activity set " +
				"type=?," +
                "activity_date=?," +
                "distance=?," +
                "duration=?," +
                "user_id=?" +
                " where id=?";
		try (Connection con = dataSource.getConnection(); PreparedStatement ps = con.prepareStatement(sql)) {
			ps.setString(1, activity.getType().toString());
			ps.setDate(2, Date.valueOf(activity.getDate()));
			ps.setDouble(3, activity.getDistance());
			ps.setInt(4, activity.getDuration());
			ps.setLong(5, activity.getUser().getId());
			ps.setLong(6, activity.getId());
			ps.executeUpdate();
			return true;
		} catch (SQLException sqlException) {
			throw new RuntimeException("Erro ao atualizar dados", sqlException);
		}
	}
	
	public Boolean delete(Activity activity) {
		String sql = "delete from activity where id=?";
		try (Connection con = dataSource.getConnection(); PreparedStatement ps = con.prepareStatement(sql)) {
			ps.setLong(1, activity.getId());
			ps.executeUpdate();
			return true;
		} catch (SQLException sqlException) {
			throw new RuntimeException("Erro ao remover dados", sqlException);
		}
	}

- Alterar a classe ActivityRegisterServlet:

package br.edu.ifspcjo.ads.web2.ifitness.servlets;

import java.io.IOException;
import java.time.LocalDate;
import java.util.Optional;

import br.edu.ifspcjo.ads.web2.ifitness.dao.ActivityDao;
import br.edu.ifspcjo.ads.web2.ifitness.dao.UserDao;
import br.edu.ifspcjo.ads.web2.ifitness.model.Activity;
import br.edu.ifspcjo.ads.web2.ifitness.model.ActivityType;
import br.edu.ifspcjo.ads.web2.ifitness.model.User;
import br.edu.ifspcjo.ads.web2.ifitness.utils.DataSourceSearcher;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@WebServlet("/activityRegister")
public class ActivityRegisterServlet extends HttpServlet {

	private static final long serialVersionUID = 1L;

	public ActivityRegisterServlet() {
		super();
	}

	@Override
	protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		Long id = Long.parseLong(req.getParameter("id"));
		ActivityType type = ActivityType.valueOf(req.getParameter("type"));
		LocalDate date = LocalDate.parse(req.getParameter("date"));
		Double distance = Double.parseDouble(req.getParameter("distance"));
		Integer duration = Integer.parseInt(req.getParameter("duration"));

		// buscar User logado
		Optional<User> optional = getLoggedUser(req);

		RequestDispatcher dispatcher = null;
		
		if(optional.isPresent()) {
			ActivityDao activityDao = new ActivityDao(DataSourceSearcher.getInstance().getDataSource());
			Activity activity = new Activity();
			activity.setType(type);
			activity.setDate(date);
			activity.setDistance(distance);
			activity.setDuration(duration);
			activity.setUser(optional.get());
			if(id == 0) {
				if(activityDao.save(activity)) {
					req.setAttribute("result", "registered");
					dispatcher = req.getRequestDispatcher("/activity-register.jsp");
				}
			}else {
				activity.setId(id);
				if(activityDao.update(activity)) {
					req.setAttribute("result", "registered");
					dispatcher = req.getRequestDispatcher("/activity-register.jsp");
				}
			}	
		} else {
			req.setAttribute("result", "notRegistered");
			dispatcher = req.getRequestDispatcher("/activity-register.jsp");
		}

		dispatcher.forward(req, resp);
	}
	
	@Override
	protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
		String action = req.getParameter("action");
		Long activityId = Long.parseLong(req.getParameter("activity-id"));
		
		ActivityDao activityDao = new ActivityDao(DataSourceSearcher.getInstance().getDataSource());
		Activity activity = activityDao.getActivitiesById(activityId);
		RequestDispatcher dispatcher = null;
		if(activity != null) {
			if(action.equals("update")) {
				req.setAttribute("activity", activity);
				dispatcher = req.getRequestDispatcher("/activity-register.jsp");
			}
			if(action.equals("delete")) {
				activityDao.delete(activity);
				dispatcher = req.getRequestDispatcher("/homeServlet");
			}
		}else {
			dispatcher = req.getRequestDispatcher("/homeServlet");
		}
		dispatcher.forward(req, resp);
	}

	private Optional<User> getLoggedUser(HttpServletRequest req) {
		Optional<User> optional = Optional.empty();
		Cookie[] cookies = req.getCookies();
		if (cookies != null) {
			for (Cookie c : cookies) {
				if (c.getName().equals("loggedUser")) {
					UserDao userDao = new UserDao(DataSourceSearcher.getInstance().getDataSource());
					optional = userDao.getUserByEmail(c.getValue());
				}
			}
		}
		return optional;
	}

}

- Alterar a página home.jsp:

<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8" 
    import = "java.util.List,br.edu.ifspcjo.ads.web2.ifitness.model.Activity"%>
<%@ taglib prefix="c" uri="jakarta.tags.core"%>
<%@ taglib prefix="fn" uri="jakarta.tags.functions"%>
<%@ taglib prefix="fmt" uri="jakarta.tags.fmt" %>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link
	href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css"
	rel="stylesheet">
<link rel="stylesheet" href="css/home.css">
<title>iFitness - Página principal</title>
</head>
<body>
	<nav class="navbar navbar-expand-lg navbar-light bg-light">
	  <div class="container-fluid">
	    <a class="navbar-brand" href="homeServlet">IFitness</a>
	    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" 
		aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
	      <span class="navbar-toggler-icon"></span>
	    </button>
	    <div class="collapse navbar-collapse" id="navbarSupportedContent">
	      <ul class="navbar-nav me-auto mb-2 mb-lg-0">
	        <li class="nav-item">
	          <a class="nav-link" href="activity-register.jsp">Atividade</a>
	        </li>
	        <li class="nav-item">
	          <a class="nav-link" href="#">Estatísticas</a>
	        </li>
	        <li class="nav-item dropdown">
	          <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
	            ${name}
	          </a>
	          <ul class="dropdown-menu">
	            <li><a class="dropdown-item" href="#">Minha Conta</a></li>
	            <li><hr class="dropdown-divider"></li>
	            <li><a class="dropdown-item" href="#">Sair</a></li>
	          </ul>
	        </li>
	      </ul>
	      <form class="d-flex">
	        <input class="form-control me-2" type="search" placeholder="Pesquisar">
	        <button class="btn btn-outline-success" type="submit">Pesquisar</button>
	      </form>
	    </div>
	  </div>
	</nav>
	<div class="container">
		<div class="center col-lg-10 col-sm-12">
			<div class="col-12">
				<h1 class="text-center">Listagem de Atividades</h1>
			</div>
			<c:choose>
				<c:when test="${fn:length(userActivities) > 0}">
					<table class="table table-responsive table-striped table-hover" >
						<tr>
							<th>#</th>
							<th>Tipo</th>
							<th>Data</th>
							<th>Distância</th>
							<th>Duração</th>
							<th>Ações</th>
						</tr>
						<c:forEach var="activity" items="${userActivities}" varStatus="index">
							<tr>
								<td>${index.count}</td>
								<td>
									<c:choose>
										<c:when test="${activity.type == 'CORRIDA'}">
											<img src="icons/running_icon.png" alt="Corrida">
										</c:when>
										<c:when test="${activity.type == 'CAMINHADA'}">
											<img src="icons/walking_icon.png" alt="Corrida">
										</c:when>
										<c:when test="${activity.type == 'CICLISMO'}">
											<img src="icons/cycling_icon.png" alt="Corrida">
										</c:when>
										<c:when test="${activity.type == 'NATACAO'}">
											<img src="icons/swimming_icon.png" alt="Corrida">
										</c:when>
									</c:choose>
								</td>
								<td>
									<fmt:parseDate value="${activity.date}" pattern="yyyy-MM-dd" var="parsedDate" type="date" />
									<fmt:formatDate value="${parsedDate}" var="newParsedDate" type="date" pattern="dd/MM/yyyy" />
									${newParsedDate}
								</td>
								<td>${activity.distance}</td>
								<td>${activity.duration}</td>
								<td>
									<a class="btn" data-bs-toggle="tooltip" data-bs-placement="top" title="Editar"
                						href="activityRegister?action=update&activity-id=${activity.id}">
                						<img src="icons/pencil-square.svg" alt="Editar">
                					</a>
                					<a class="btn" data-bs-toggle="tooltip" data-bs-placement="top" title="Excluir"
                						href="activityRegister?action=delete&activity-id=${activity.id}">
                						<img src="icons/trash.svg" alt="Excluir">
                					</a>
								</td>
							</tr>
						</c:forEach>
					</table>
				</c:when>
				<c:otherwise>
					<c:out value="Sem nenhuma atividade registrada."></c:out>
				</c:otherwise>
			</c:choose>
		</div>
	</div>
	
	<script
		src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
	<script type="text/javascript" src="js/home.js"></script>
</body>
</html>

- Adicionar o arquivo home.js:

var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
  return new bootstrap.Tooltip(tooltipTriggerEl)
})

- Alterar a página activity-register.jsp:

<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="jakarta.tags.core"%>
<%@ taglib prefix="fn" uri="jakarta.tags.functions"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>iFitness - Página de Cadastro de Atividade</title>
<link
	href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css"
	rel="stylesheet">
<link rel="stylesheet" href="css/activity-register.css">
</head>
<body>
	<nav class="navbar navbar-expand-lg navbar-light bg-light">
	  <div class="container-fluid">
	    <a class="navbar-brand" href="homeServlet">IFitness</a>
	    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
	      <span class="navbar-toggler-icon"></span>
	    </button>
	    <div class="collapse navbar-collapse" id="navbarSupportedContent">
	      <ul class="navbar-nav me-auto mb-2 mb-lg-0">
	        <li class="nav-item">
	          <a class="nav-link" href="homeServlet">Home</a>
	        </li>
	      </ul>
	    </div>
	  </div>
	</nav>
	<div class="container ">
		<div class="center col-lg-6 offset-lg-3 col-sm-12">
				<c:if test="${result == 'registered'}">
					<div class="alert alert-success alert-dismissible fade show"
						role="alert">
						Atividade salva com sucesso.
						<button type="button" class="btn-close" data-bs-dismiss="alert"
							aria-label="Close"></button>
					</div>
				</c:if>
				<c:if test="${result == 'notRegistered'}">
					<div class="alert alert-danger alert-dismissible fade show"
						role="alert">
						Atividade não salva. Faça o login.
						<button type="button" class="btn-close" data-bs-dismiss="alert"
							aria-label="Close"></button>
					</div>
				</c:if>
				
			<form action="activityRegister" method="post" id="form1">
					<c:choose>
						<c:when test="${activity == null}">
							<h1 class="text-center">Nova Atividade</h1>
						</c:when>
						<c:when test="${activity != null}">
							<h1 class="text-center">Edição de Atividade</h1>
						</c:when>
					</c:choose>
					<c:choose>
						<c:when test="${activity == null}">
							<input type="hidden" name="id" value="0">
						</c:when>
						<c:when test="${activity != null}">
							<input type="hidden" name="id" value="${activity.id}">
						</c:when>
					</c:choose>
					<div class="mb-2">
						<label for="type">Tipo*</label> 
						<select class="form-select"
							name="type" id="type" required="required">
							<c:choose>
								<c:when test="${activity == null}">
									<option value="" selected>Selecione</option>
								</c:when>
							</c:choose>
							
							<c:choose>
								<c:when test="${activity.type != 'CAMINHADA'}">
									<option value="CAMINHADA">Caminhada</option>
								</c:when>
								<c:when test="${activity.type == 'CAMINHADA'}">
									<option value="CAMINHADA" selected>Caminhada</option>
								</c:when>
							</c:choose>
							<c:choose>
								<c:when test="${activity.type != 'CICLISMO'}">
									<option value="CICLISMO">Ciclismo</option>
								</c:when>
								<c:when test="${activity.type == 'CICLISMO'}">
									<option value="CICLISMO" selected>Ciclismo</option>
								</c:when>
							</c:choose>
							<c:choose>
								<c:when test="${activity.type != 'CORRIDA'}">
									<option value="CORRIDA">Corrida</option>
								</c:when>
								<c:when test="${activity.type == 'CORRIDA'}">
									<option value="CORRIDA" selected>Corrida</option>
								</c:when>
							</c:choose>
							<c:choose>
								<c:when test="${activity.type != 'NATACAO'}">
									<option value="NATACAO">Natação</option>
								</c:when>
								<c:when test="${activity.type == 'NATACAO'}">
									<option value="NATACAO" selected>Natação</option>
								</c:when>
							</c:choose>
						</select>
					</div>
					
					<div class="mb-2">
						<label for="date">Data*</label> 
						<input type="date" name="date" id="date"
							class="form-control" required="required" value="${activity.date}">
					</div>

					<div class="mb-2">
						<label for="distance">Distância (Km)*</label> 
						<input type="number"
							name="distance" id="distance" class="form-control" step="0.1" 
							required="required" value="${activity.distance}">
					</div>

					<div class="mb-2">
						<label for="duration">Duração (minutos)*</label> 
						<input type="number" step="1"
							name="duration" id="duration" class="form-control" required="required"
							value="${activity.duration}">
					</div>

					<div class="col-12 mb-2">
						<button type="submit" class="btn btn-primary">Salvar</button>
					</div>
			</form>
		</div>
	</div>
	<script
		src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>

